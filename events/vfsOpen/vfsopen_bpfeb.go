// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package vfsOpen

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadVfsOpen returns the embedded CollectionSpec for vfsOpen.
func loadVfsOpen() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_VfsOpenBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load vfsOpen: %w", err)
	}

	return spec, err
}

// loadVfsOpenObjects loads vfsOpen and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*vfsOpenObjects
//	*vfsOpenPrograms
//	*vfsOpenMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadVfsOpenObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadVfsOpen()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// vfsOpenSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type vfsOpenSpecs struct {
	vfsOpenProgramSpecs
	vfsOpenMapSpecs
	vfsOpenVariableSpecs
}

// vfsOpenProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type vfsOpenProgramSpecs struct {
	VfsOpen *ebpf.ProgramSpec `ebpf:"vfs_open"`
}

// vfsOpenMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type vfsOpenMapSpecs struct {
	VfsOpenEventMap *ebpf.MapSpec `ebpf:"vfsOpenEventMap"`
}

// vfsOpenVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type vfsOpenVariableSpecs struct {
}

// vfsOpenObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadVfsOpenObjects or ebpf.CollectionSpec.LoadAndAssign.
type vfsOpenObjects struct {
	vfsOpenPrograms
	vfsOpenMaps
	vfsOpenVariables
}

func (o *vfsOpenObjects) Close() error {
	return _VfsOpenClose(
		&o.vfsOpenPrograms,
		&o.vfsOpenMaps,
	)
}

// vfsOpenMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadVfsOpenObjects or ebpf.CollectionSpec.LoadAndAssign.
type vfsOpenMaps struct {
	VfsOpenEventMap *ebpf.Map `ebpf:"vfsOpenEventMap"`
}

func (m *vfsOpenMaps) Close() error {
	return _VfsOpenClose(
		m.VfsOpenEventMap,
	)
}

// vfsOpenVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadVfsOpenObjects or ebpf.CollectionSpec.LoadAndAssign.
type vfsOpenVariables struct {
}

// vfsOpenPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadVfsOpenObjects or ebpf.CollectionSpec.LoadAndAssign.
type vfsOpenPrograms struct {
	VfsOpen *ebpf.Program `ebpf:"vfs_open"`
}

func (p *vfsOpenPrograms) Close() error {
	return _VfsOpenClose(
		p.VfsOpen,
	)
}

func _VfsOpenClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed vfsopen_bpfeb.o
var _VfsOpenBytes []byte
